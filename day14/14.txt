前情回顾

1. 孤儿和僵尸

   孤儿: 父进程先退出

   僵尸: 子先退出,父进程不处理
      join  signal

2. 自定义进程类

   继承Process --> 重写__init__,super()-->run()

3. 进程池 (应对大量任务源源不断产生使用进程处理)

   Pool()
   apply_async()
   close()
   join()

4. 消息队列

    Queue()
    p.get()
    p.put()

群聊聊天室

1. 需求分析: 建立产品的使用雏形(客户端) visio

    根据需求,规划要实现的功能

2. 技术分析: 根据功能确定实现技术

   网络通信 : udp 网络技术


   消息收发模型
       * 转发   客户端--> 服务端-->其他客户端
       * 用户进入聊天室时要存储用户地址 怎么存
          {name:address}
          [(name,address),....]
          class Person:
              def __init__(self,name,address):
                  self.name = name
                  self.address = address


       * 收发消息互相不干扰
          父进程 发送消息
          子进程 接收消息

3. 功能模块分析(封装) : 拆

    * 实现一个功能测一个功能
    * 函数封装

    进入聊天室
    聊天
    退出聊天室

4. 通信协议设计

         请求类型     数据

   进入   L          name

   聊天   C          name   content

   退出   E          name


5. 分模块具体逻辑设计

  搭建基本网络结构
     服务端: 1. 创建udp网络通信
            2. 准备循环接受客户端消息
            3. 根据请求调用合适的函数处理

     客户端: 1.创建udp套接字


  进入聊天室
     客户端: 1. 输入姓名
            2. 发送请求
            3. 接受服务端的通知结果
            4. Y 则进入  N 则重新输入姓名

     服务端: 1. 接收请求
            2. 判断用户是否存在
            3. Y  告知客户端不能进入  over
            4. N  告知客户端进入聊天室
                  通知其他用户
                  存储用户信息

  聊天
     客户端: 1. 创建子进程
            2. 子进程循环接收消息
            3. 父进程循环输入发送消息

     服务端: 1. 接收消息
            2. 将消息转发给其他人


  退出聊天室  输入exit表示退出

      客户端 : 1. exit表示退出
              2. 发送消息
              3. 结束进程

      服务端 : 1. 接收消息
              2. 告知其他用户
              3. 将该用户删除

6. 优化完善


重点 : 1  初始通信协议     请求类型+数据
      2  服务端总分模型   循环一处接受请求,分情况讨论调用

练习: 模拟自动窗口售票系统
10个窗口,同时售票,一个线程表示一个窗口
一共有500张票, 放在列表中记做T1--T500,
要求按照顺序卖出(打印 w1---T305)
每次买一张票会有 0.1s停顿
编程模拟这个事情

作业 : 1. 聊天室代码  自己写一下
      2. 练习没做完的做一下

